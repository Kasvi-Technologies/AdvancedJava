Threads
Runnable
Callable
Futute
Executors
Thread Schedulers
CountDownLatch
ThreadLocal Varables
Synchonization
Locks
ReentrantLocks
ReentrantReadWriteLocks
Deadlocks
How to analyze deadlocks and what are the tools available

		Environment Setup

1. JDK 1.8 32 bit/64bit

2.Eclipse Neon 32 bit / 6 bit

Threads

1. will execute parallelly. That means asynchronous manner

2. there are 2 ways to create a thread in java applcation

Thread class  or Runnable interface

	run() -> run method is available in runnable 			         interface. 
		
		 run() method should contain the business
		 logic which will execute in the background
	

By default Thread class implements Runnable
	
	start() - > method will call the run () method and 		    this run() method will be executed in the       background


Excercise

1. create a SMS Thread similar to Mail Thread

2. Write a test program 
	a. create 2 -3 mail threads
	b. create 2-3 sms threads
	c. start all threads 


Runnable Interface


With Out Synchronization

	a. A

		amount

	T1  - A

	T2  - A
	

BankAccount
	
		int amount =


		deposit(){

		}


		withdraw(){

		}

}

T1  -> BA  -> depost()

T2  -> BA  -> withdraw()

		Excercise


1. Message class with message variable

	a. write a produce(String message) method 
	b. and set some message to message variable
	c. and call notify

	a. write a consumer() method
	b. if message is null, wait()
	c. display the message after wait()


2. ProducerThread will have run method (), that will call produce method() with message

3. ConsumerThread will have run method() that will call consume() method

d. test program -. 
	a. Message object, consumerthread and 	   	              producerthread
 	b. start consumer thread and producer thread

jstack utitilty to collect thread dump

jstack -l <pid> > logfilename


samurai is one of the tool to open thread dumps


		Executor Services

1. you can define how many threads you need to run in your application

2. start your threads using executor services. 

3. callable interface can return a value








































 